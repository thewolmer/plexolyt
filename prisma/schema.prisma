generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  SHIPPED
  CANCELLED
  DELIVERED
}

model Billboard {
  id         String     @id @map("_id")
  label      String     @unique
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
}

model Category {
  id          String    @id @map("_id")
  name        String    @unique
  description String
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model SubCategory {
  id        String    @id @map("_id")
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Color {
  id            String         @id @map("_id")
  name          String         @unique
  hex           String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productColors ProductColor[]
  orderItems    OrderItem[]
}

model Length {
  id             String          @id @map("_id")
  name           String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  productLengths ProductLength[]
  orderItems     OrderItem[]
}

model Gauge {
  id            String         @id @map("_id")
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productGauges ProductGauge[]
  orderItems    OrderItem[]
}

model Width {
  id            String         @id @map("_id")
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productWidths ProductWidth[]
  orderItems    OrderItem[]
}

model Product {
  id             String          @id @map("_id")
  name           String          @unique
  price          Int
  stock          Int
  description    String
  categoryId     String
  category       Category        @relation(fields: [categoryId], references: [id])
  subCategoryId  String
  subCategory    SubCategory     @relation(fields: [subCategoryId], references: [id])
  isFeatured     Boolean         @default(false)
  isArchived     Boolean         @default(false)
  images         ProductImage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orderItems     OrderItem[]
  productColors  ProductColor[]
  productLengths ProductLength[]
  productGauges  ProductGauge[]
  productWidths  ProductWidth[]
}

model ProductImage {
  id        String   @id @default(uuid()) @map("_id")
  imageUrl  String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String      @id @default(cuid()) @map("_id")
  stripeId       String      @default("Unknown")
  name           String      @default("Unknown")
  email          String      @default("Unknown")
  phone          String      @default("Unknown")
  line1          String      @default("")
  line2          String      @default("")
  city           String      @default("")
  state          String      @default("")
  postal_code    String      @default("")
  country        String      @default("")
  orderItems     OrderItem[]
  payment_status String      @default("unpaid")
  amount         Int         @default(0)
  order_status   OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid()) @map("_id")
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  colorId   String
  lengthId  String
  gaugeId   String
  widthId   String
  color     Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  length    Length   @relation(fields: [lengthId], references: [id], onDelete: Cascade)
  gauge     Gauge    @relation(fields: [gaugeId], references: [id], onDelete: Cascade)
  width     Width    @relation(fields: [widthId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Join tables for many-to-many relations

model ProductColor {
  id        String  @id @default(cuid()) @map("_id")
  productId String
  colorId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color     Color   @relation(fields: [colorId], references: [id])

  @@unique([productId, colorId])
}

model ProductLength {
  id        String  @id @default(cuid()) @map("_id")
  productId String
  lengthId  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  length    Length  @relation(fields: [lengthId], references: [id])

  @@unique([productId, lengthId])
}

model ProductGauge {
  id        String  @id @default(cuid()) @map("_id")
  productId String
  gaugeId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  gauge     Gauge   @relation(fields: [gaugeId], references: [id])

  @@unique([productId, gaugeId])
}

model ProductWidth {
  id        String  @id @default(cuid()) @map("_id")
  productId String
  widthId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  width     Width   @relation(fields: [widthId], references: [id])

  @@unique([productId, widthId])
}
