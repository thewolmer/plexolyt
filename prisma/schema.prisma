// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  SHIPPED
  CANCELLED
  DELIVERED
}

model Billboard {
  id         String     @id @map("_id")
  label      String     @unique
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
}

model Category {
  id          String    @id @map("_id")
  name        String    @unique
  description String
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id], onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model SubCategory {
  id        String    @id @map("_id")
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Color {
  id        String    @id @map("_id")
  name      String    @unique
  hex       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Length {
  id        String    @id @map("_id")
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Gauge {
  id        String    @id @map("_id")
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Width {
  id String @id @map("_id")

  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            String         @id @map("_id")
  name          String         @unique
  price         String
  stock         String
  description   String
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id], onUpdate: Cascade)
  subCategoryId String
  subCategory   SubCategory    @relation(fields: [subCategoryId], references: [id], onUpdate: Cascade)
  colorId       String
  color         Color          @relation(fields: [colorId], references: [id], onUpdate: Cascade)
  lengthId      String
  length        Length         @relation(fields: [lengthId], references: [id], onUpdate: Cascade)
  gaugeId       String
  gauge         Gauge          @relation(fields: [gaugeId], references: [id], onUpdate: Cascade)
  widthId       String
  width         Width          @relation(fields: [widthId], references: [id], onUpdate: Cascade)
  isFeatured    Boolean        @default(false)
  isArchived    Boolean        @default(false)
  images        ProductImage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderItems    OrderItem[]
}

model ProductImage {
  id        String   @id @default(uuid()) @map("_id")
  imageUrl  String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String      @id @default(cuid()) @map("_id")
  stripeId       String      @default("Unknown")
  name           String      @default("Unknown")
  email          String      @default("Unknown")
  phone          String      @default("Unknown")
  line1          String      @default("")
  line2          String      @default("")
  city           String      @default("")
  state          String      @default("")
  postal_code    String      @default("")
  country        String      @default("")
  orderItems     OrderItem[]
  payment_status String      @default("unpaid")
  amount         Int         @default(0)
  order_status   OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid()) @map("_id")
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
